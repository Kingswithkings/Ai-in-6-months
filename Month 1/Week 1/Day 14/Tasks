# Imports
import torch
import torch.nn as nn
import torch.optim as optim
import matplotlib.pyplot as plt
import numpy as np

print('PyTorch version:', torch.__version__)


# Task 1 : Creation and OPerations (Tensors are the core data structure in PyTorch, similar to NumPy arrays but with GPU support and autograd).

# Create tensors
x = torch.tensor([1.0, 2.0, 3.0])
print('x:', x)

# From numpy
arr = np.array([4.0, 5.0, 6.0])
t = torch.from_numpy(arr)
print('from numpy:', t)

# Random tensors
r = torch.randn(2,3)
print('random:', r)

# Basic operations
print('x + x', x + x)
print('x * 2:', x * 2)


# Task 2 Autograd - gradients (Use requires_grad=True to track operations for automatic differentiation.)
# Autograd example
a = torch.tensor(2.0, requires_grad=True)
b = torch.tensor(3.0, requires_grad=True)

c = a * b + a**2
print('c:', c)

# Compute gradients
c.backward()
print('dc/da (grad of a ):', a.grad)
print('dc/db (grad of b):', b.grad)


# Task 3 Build a Simple MLP (classification) and train on synthetic data
# We'll build a 2-layer MLP to classify points from two Gaussian blobs.

# Create synthetic dataset (2D) - two blobs
from sklearn.datasets import make_blobs
X, y = make_blobs(n_samples=500, centers=2, random_state=42)
X = x.astype(np.float32)
y = y.astype(np.int64)

# Convert to torch tensors
tX = torch.from_numpy(X)
ty = torch.from_numpy(y)

# Visualise data
import matplotlib.pyplot as plt
plt.figure(figsize=(6,4))
plt.scatter(X[:,0], X[:,1], c=y, cmap='viridis', s=10)
plt.title('Synthetic blobs')
plt.show()